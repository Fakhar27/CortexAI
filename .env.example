# Cortex Environment Configuration Example
# Copy this file to .env and update with your values

# ==============================================================================
# DATABASE CONFIGURATION
# ==============================================================================

# Option 1: Local PostgreSQL (recommended for production)
# DATABASE_URL=postgresql://postgres:password@localhost:5432/cortex

# Option 2: Supabase (free PostgreSQL hosting)
# Get your URL from: https://supabase.com/dashboard/project/_/settings/database
# DATABASE_URL=postgresql://postgres:[password]@db.[project-id].supabase.co:5432/postgres

# Option 3: Other PostgreSQL providers
# Neon: DATABASE_URL=postgresql://user:pass@[project].neon.tech/neondb
# Railway: DATABASE_URL=postgresql://postgres:pass@containers-us-west-123.railway.app:5432/railway
# AWS RDS: DATABASE_URL=postgresql://user:pass@database.region.rds.amazonaws.com:5432/dbname

# Note: If DATABASE_URL is not set, Cortex will use SQLite locally (conversations.db)

# ==============================================================================
# LLM PROVIDER API KEYS
# ==============================================================================
# Set the API keys for the providers you want to use
# You only need to set keys for the models you plan to use

# OpenAI (for GPT-4, GPT-3.5, etc.)
# Get your key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-...your-openai-api-key-here...

# Google AI (for Gemini models)
# Get your key from: https://makersuite.google.com/app/apikey
GOOGLE_API_KEY=AIza...your-google-api-key-here...

# Cohere (for Command models)
# Get your key from: https://dashboard.cohere.com/api-keys
COHERE_API_KEY=...your-cohere-api-key-here...

# ==============================================================================
# AVAILABLE MODELS
# ==============================================================================
# After setting your API keys above, you can use these models:
#
# OpenAI Models (requires OPENAI_API_KEY):
#   - gpt-4o           : Latest GPT-4 Optimized
#   - gpt-4o-mini      : Smaller, faster GPT-4
#   - gpt-4-turbo      : GPT-4 with 128k context
#   - gpt-3.5-turbo    : Fast and cost-effective
#
# Google Gemini Models (requires GOOGLE_API_KEY):
#   - gemini-1.5-flash : Fast Gemini model with 1M context
#   - gemini-1.5-pro   : Advanced Gemini with 2M context
#   - gemini-1.0-pro   : Stable Gemini model
#
# Cohere Models (requires COHERE_API_KEY):
#   - command-r        : Latest Command model with 128k context
#   - command-r-plus   : Enhanced Command model
#   - command          : Original Command model
#
# Example usage:
#   client.create(model="gpt-4o-mini", input="Hello")
#   client.create(model="gemini-1.5-flash", input="Hello")
#   client.create(model="command-r", input="Hello")

# ==============================================================================
# OPTIONAL CONFIGURATION
# ==============================================================================

# Custom SQLite database path (only used if DATABASE_URL is not set)
# CORTEX_DB_PATH=./data/conversations.db

# ==============================================================================
# SERVERLESS DEPLOYMENT
# ==============================================================================

# For Vercel, AWS Lambda, Google Cloud Functions, etc:
# 1. Set DATABASE_URL in your platform's environment variables
# 2. Set the appropriate API keys (OPENAI_API_KEY, GOOGLE_API_KEY, etc.)
# 3. Deploy your function - Cortex will automatically detect serverless environment

# ==============================================================================
# TESTING CONFIGURATIONS
# ==============================================================================

# For testing Supabase separately from main DATABASE_URL
# SUPABASE_DB_URL=postgresql://postgres:[password]@db.[project].supabase.co:5432/postgres

# ==============================================================================
# NOTES
# ==============================================================================

# 1. SQLite (default): Great for development, not for serverless
# 2. PostgreSQL: Required for production and serverless deployments
# 3. Supabase: Easiest way to get started with PostgreSQL (free tier available)
# 4. Environment variables can be set in:
#    - .env file (local development)
#    - Platform settings (Vercel, Netlify, Railway, etc)
#    - Cloud provider (AWS Parameter Store, Google Secret Manager, etc)
# 5. You can check which models are available and configured by calling:
#    from cortex.models.registry import list_available_models
#    print(list_available_models())