# Multi-stage build for Django + Cortex Lambda
FROM public.ecr.aws/lambda/python:3.11 as builder

# Install build dependencies
RUN yum install -y \
    gcc \
    gcc-c++ \
    make \
    python3-devel \
    postgresql-devel \
    libpq-devel \
    git \
    && yum clean all

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements
COPY requirements-lambda.txt /tmp/

# Install Python packages in virtual environment
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r /tmp/requirements-lambda.txt

# Final stage
FROM public.ecr.aws/lambda/python:3.11

# Install runtime dependencies only
RUN yum install -y \
    postgresql-libs \
    && yum clean all

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Set Python path to use virtual environment
ENV PATH="/opt/venv/bin:$PATH"
ENV PYTHONPATH="${LAMBDA_TASK_ROOT}:/opt/venv/lib/python3.11/site-packages:${PYTHONPATH}"

# Copy application code
COPY cortex/ ${LAMBDA_TASK_ROOT}/cortex/
COPY lambda_handler_django.py ${LAMBDA_TASK_ROOT}/

# Copy Django project if exists (optional)
# COPY myproject/ ${LAMBDA_TASK_ROOT}/myproject/

# Create necessary directories
RUN mkdir -p ${LAMBDA_TASK_ROOT}/tmp && \
    chmod 777 ${LAMBDA_TASK_ROOT}/tmp

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DJANGO_SETTINGS_MODULE=myproject.settings

# Lambda handler
CMD ["lambda_handler_django.lambda_handler"]